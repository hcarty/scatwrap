-=- Code Cleanup
	[_] Check the different routines for consistency in coordinate handling.
	: Array vs Hash

-=- New Code
	[_] Create a data(base) module.
	: This should probably be separate from the ScatWrap::Shape class
	: implementation, ie. no inheritance between the two.  It should instead
	: be a separate class, an object of which can be passed in to
	: ScatWrap::Shape as a means of retrieving and saving data.
	:
	: Perhaps this should be a general ScatWrap::Data module rather than a
	: database module?  It could hold input file loading routines, as well as
	: inherit + pass on database routines for data loading/saving/etc.
		[_] Use Class::DBI or similar for a cleaner and safer database interface.
	[_] Use YAML for data dumping and testing.
		[X] Implement in test script for ScatWrap::Shape dumping.
		[_] Implement a YAML backend for the data(base) module.

-=- Future Work
	[_] Move to Sixxy.pm when it is available and reasonably stable.
	[_] Generate proper table IDs for the database tables.
	: Currently, the code uses the DB's builtin AUTOINCREMENT abilities.  This
	: should (apparently) not be done, so find a better way.  It works well
	: for a prototype though, and I think only really becomes an issue under
	: heavy use.
	[_] Create a graphics/display module of some sort.
		[_] display_shape() needs to be in there.
		: Use PDL::TriD or gnuplot for now.
		[_] Export of a preview image to gif/png/jpeg/etc.
	[_] Docs.
		[_] API documentation.
		[_] Program use.
		[_] Input shape/object requirements.
		: Closed, convex hull.
	[_] Add the ability to load other 3d mesh file types.
		[_] Split the loading routines in to a separate module.
	[_] Add the ability to define extra shapes to add to the body.
	: Spheres, cubes, etc.  Probably in a separate module?
